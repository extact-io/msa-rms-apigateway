<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>io.extact</groupId>
		<artifactId>msa-rms-parent</artifactId>
		<version>0.0.1-SNAPSHOT</version>
		<relativePath>../msa-rms/pom.xml</relativePath>
	</parent>
	<artifactId>msa-rms-apigateway</artifactId>
	<packaging>jar</packaging>
	<name>msa-rms-apigateway</name>
	<description>rms apigateway module</description>

	<repositories>
		<repository>
			<id>github</id>
			<name>GitHub Apache Maven Packages</name>
			<url>https://maven.pkg.github.com/extact-io/msa-rms-parent</url>
			<releases>
				<enabled>true</enabled>
			</releases>
			<snapshots>
				<enabled>true</enabled>
			</snapshots>
		</repository>
	</repositories>

	<properties>
		<mainClass>io.extact.msa.rms.apigateway.ApiGatewayMain</mainClass>
		<image.name>msa-apigateway</image.name>
		<gen.js.client.version>2.0.0</gen.js.client.version>
	</properties>

	<dependencies>
		<!-- ======================================== -->
		<!-- *** rms module dependencies ***              -->
		<!-- ======================================== -->
		<dependency>
			<groupId>io.extact</groupId>
			<artifactId>msa-rms-test-lib</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>io.extact</groupId>
			<artifactId>msa-rms-platform-core</artifactId>
		</dependency>
		<dependency>
			<groupId>io.extact</groupId>
			<artifactId>msa-rms-platform-fw</artifactId>
		</dependency>
		<dependency>
			<groupId>io.extact</groupId>
			<artifactId>msa-rms-platform-fw-test-lib</artifactId>
			<scope>test</scope>
		</dependency>

		<!-- ======================================== -->
		<!-- *** provided scope dependencies ***      -->
		<!-- ======================================== -->
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<scope>provided</scope>
		</dependency>
		<!-- redefine with compile scoped in pesistence-jpa -->
		<dependency>
			<groupId>jakarta.transaction</groupId>
			<artifactId>jakarta.transaction-api</artifactId>
			<scope>provided</scope>
		</dependency>

		<!-- ======================================== -->
		<!-- *** compile scope dependencies(APIs) *** -->
		<!-- ======================================== -->
		<!-- dependent JakartaEE APIs -->
		<!-- for service/domain layer dependency -->
		<dependency>
			<groupId>jakarta.inject</groupId>
			<artifactId>jakarta.inject-api</artifactId>
		</dependency>
		<dependency>
			<groupId>jakarta.validation</groupId>
			<artifactId>jakarta.validation-api</artifactId>
		</dependency>
		<dependency>
			<groupId>jakarta.enterprise</groupId>
			<artifactId>jakarta.enterprise.cdi-api</artifactId>
		</dependency>
		<dependency>
			<groupId>jakarta.persistence</groupId>
			<artifactId>jakarta.persistence-api</artifactId>
		</dependency>
		<!-- for webapi -->
		<dependency>
			<groupId>jakarta.ws.rs</groupId>
			<artifactId>jakarta.ws.rs-api</artifactId>
		</dependency>
		<dependency>
			<groupId>jakarta.json.bind</groupId>
			<artifactId>jakarta.json.bind-api</artifactId>
		</dependency>
		<dependency>
			<groupId>jakarta.security.enterprise</groupId>
			<artifactId>jakarta.security.enterprise-api</artifactId>
		</dependency>

		<!-- dependent MicroProfile APIs -->
		<dependency>
			<groupId>org.eclipse.microprofile.jwt</groupId>
			<artifactId>microprofile-jwt-auth-api</artifactId>
		</dependency>
		<dependency>
			<groupId>org.eclipse.microprofile.health</groupId>
			<artifactId>microprofile-health-api</artifactId>
		</dependency>
		<dependency>
			<groupId>org.eclipse.microprofile.openapi</groupId>
			<artifactId>microprofile-openapi-api</artifactId>
		</dependency>
		<dependency>
			<groupId>org.eclipse.microprofile.rest.client</groupId>
			<artifactId>microprofile-rest-client-api</artifactId>
		</dependency>
		<dependency>
			<groupId>org.eclipse.microprofile.opentracing</groupId>
			<artifactId>microprofile-opentracing-api</artifactId>
		</dependency>
		<dependency>
			<groupId>org.eclipse.microprofile.fault-tolerance</groupId>
			<artifactId>microprofile-fault-tolerance-api</artifactId>
		</dependency>

		<!-- dependent OpenTracing APIs -->
		<dependency>
			<groupId>io.opentracing</groupId>
			<artifactId>opentracing-api</artifactId>
		</dependency>

		<!-- ======================================== -->
		<!-- *** runtime scope dependencies ***       -->
		<!-- ======================================== -->
		<!-- for MicroProfile runtimes -->
		<dependency>
			<groupId>io.helidon.microprofile.server</groupId>
			<artifactId>helidon-microprofile-server</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>io.helidon.microprofile.openapi</groupId>
			<artifactId>helidon-microprofile-openapi</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>io.helidon.microprofile.rest-client</groupId>
			<artifactId>helidon-microprofile-rest-client</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>io.helidon.microprofile.health</groupId>
			<artifactId>helidon-microprofile-health</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>io.helidon.config</groupId>
			<artifactId>helidon-config-encryption</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>io.helidon.microprofile</groupId>
			<artifactId>helidon-microprofile-cors</artifactId>
			<!--
			#TODO: workaround for https://github.com/helidon-io/helidon/issues/6787 
			-->
			<!-- 
			<scope>runtime</scope>
			-->
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>io.helidon.microprofile</groupId>
			<artifactId>helidon-microprofile-access-log</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>io.helidon.webserver</groupId>
			<artifactId>helidon-webserver-access-log</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>io.helidon.health</groupId>
			<artifactId>helidon-health-checks</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>io.helidon.microprofile.tracing</groupId>
			<artifactId>helidon-microprofile-tracing</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>io.helidon.microprofile</groupId>
			<artifactId>helidon-microprofile-fault-tolerance</artifactId>
	     	<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>io.helidon.microprofile.metrics</groupId>
			<artifactId>helidon-microprofile-metrics</artifactId>
    		<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>io.helidon.tracing</groupId>
			<artifactId>helidon-tracing-jaeger</artifactId>
			<scope>runtime</scope>
			<exclusions>
				<exclusion>
					<groupId>org.slf4j</groupId>
					<artifactId>slf4j-jdk14</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>io.helidon.microprofile.jwt</groupId>
			<artifactId>helidon-microprofile-jwt-auth</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>io.helidon.integrations.openapi-ui</groupId>
			<artifactId>helidon-integrations-openapi-ui</artifactId>
			<scope>runtime</scope>
		</dependency>

		<!-- for JWT implementation -->
		<!--
		<dependency>
			<groupId>org.bitbucket.b_c</groupId>
			<artifactId>jose4j</artifactId>
			<scope>runtime</scope>
		</dependency>
		-->
		<dependency>
			<groupId>com.auth0</groupId>
			<artifactId>java-jwt</artifactId>
			<scope>runtime</scope>
		</dependency>

		<!-- for jax-rs ext runtime -->
		<!-- for binding to application/json. It won't work without this -->
		<dependency>
			<groupId>org.glassfish.jersey.media</groupId>
			<artifactId>jersey-media-json-binding</artifactId>
			<scope>runtime</scope>
		</dependency>

		<!--
		JAX-RS's (de)serializer uses json-b's yasson, not jackson.
		Also, jackson doesn't support json-b
		for Small Rye OpenAPI dependency
		The jackson dependency was removed in the following issue.
		but the dependency was added provisionally because the alternative method is unknown.
		https://github.com/oracle/helidon/issues/1109
		-->
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-core</artifactId>
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-databind</artifactId>
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.dataformat</groupId>
			<artifactId>jackson-dataformat-yaml</artifactId>
		</dependency>

		<!-- for BeanValidation runtimes -->
		<dependency>
			<groupId>org.hibernate.validator</groupId>
			<artifactId>hibernate-validator</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.glassfish.jersey.ext</groupId>
			<artifactId>jersey-bean-validation</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.glassfish</groupId>
			<artifactId>jakarta.el</artifactId>
			<scope>runtime</scope>
		</dependency>

		<!-- ======================================== -->
		<!-- *** test scope dependencies ***      -->
		<!-- ======================================== -->
		<!-- for WARN:jakarta.persistence.spi::No valid providers found-->
		<dependency>
			<groupId>org.eclipse.persistence</groupId>
			<artifactId>org.eclipse.persistence.jpa</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>io.fabric8</groupId>
				<artifactId>docker-maven-plugin</artifactId>
			</plugin>
		</plugins>
	</build>
	<profiles>
		<profile>
			<id>gen-openapi</id>
			<properties>
				<mvn.gen-openapi.profile>on</mvn.gen-openapi.profile>
			</properties>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-surefire-plugin</artifactId>
						<configuration>
							<includes>
								<include>io.extact.msa.rms.apigateway.webapi.GenerateOasFileTest.java</include>
							</includes>
							<systemPropertyVariables>
								<mvn.gen-openapi.profile>on</mvn.gen-openapi.profile>
							</systemPropertyVariables>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>gen-js-client</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.openapitools</groupId>
						<artifactId>openapi-generator-maven-plugin</artifactId>
						<version>${version.plugin.openapi-gen}</version>
						<configuration>
							<inputSpec>${openapi.file.path}</inputSpec>
							<generatorName>javascript</generatorName>
							<configOptions>
								<projectName>@extact-io/rms-generated-client-js</projectName>
								<projectVersion>${gen.js.client.version}</projectVersion>
								<apiPackage>api</apiPackage>
								<usePromises>true</usePromises>
								<modelPackage>dto</modelPackage>
							</configOptions>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
</project>
