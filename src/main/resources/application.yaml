#----------------------------------
# Defined for each environment
#----------------------------------
env.rms:
  server:
    port: 7001
    tls.port: 7011
  service.url:
    item: http://localhost:7002
    reservation: http://localhost:7003
    user: http://localhost:7004
  sec:
    tls.passphrase: mamezou # for forTest.p12
    tls.file: # override with environment variables
    jwt:
      filter: true
      secretkey: /jwt.key
      publickey: /jwt.pub.key
  cors:
    allow.origins: http://localhost:3000 

#----------------------------------
# MicroProfile Configurations
#----------------------------------
mp:
  jwt:
    verify.publickey.location: ${env.rms.sec.jwt.publickey}
  openapi:
    model.reader: io.extact.msa.rms.platform.fw.webapi.openapi.JwtAuthDecoratedModelReader
#----------------------------------
# Helidon Configurations
#----------------------------------
server:
  port: ${env.rms.server.port}
  sockets:
    - name: secure
      port: ${env.rms.server.tls.port}
      tls:
        trust.keystore:
          passphrase: ${env.rms.sec.tls.passphrase}
          trust-store: true
          # path takes precedence
          resource:
            path: # set in ApiGatewayMain with ${env.rms.sec.tls.file}
            resource-path: forTest.p12
        private-key.keystore:
          passphrase: ${env.rms.sec.tls.passphrase}
          # path takes precedence
          resource:
            path: # set in ApiGatewayMain with ${env.rms.sec.tls.file}
            resource-path: forTest.p12
  access-log:
    format: "%t %h %r %s %b %D"
security:
  jersey:
    enabled: ${env.rms.sec.jwt.filter}
health:
  timeout-millis: 30000 # for Helidon MicroProfile Health
tracing:
  service: ApiGateway
openapi:
  #web-context: openapi-ui
  ui.options:
    # see: key is io.smallrye.openapi.ui.Option emum name
    # see: value is https://ja.quarkus.io/guides/openapi-swaggerui#swagger-ui
    displayOperationId: true
    title: RMS OpenAPI UI
    themeHref: theme-muted.css
    backHref: https://github.com/extact-io
    selfHref: https://github.com/extact-io
cors:
  enabled: true
  paths:
    - path-pattern: /{+}
      allow-headers: "*, Authorization"
      allow-origins: ${env.rms.cors.allow.origins}
      allow-credentials: true

web-api-item/mp-rest/url: ${env.rms.service.url.item}
web-api-reservation/mp-rest/url: ${env.rms.service.url.reservation}
web-api-user/mp-rest/url: ${env.rms.service.url.user}



#----------------------------------
# Applications Configurations
#----------------------------------
rms:
  app:
    name: ApiGateway
  cdi:
    configuredCdi:
      register:
        - class: io.extact.msa.rms.platform.core.jwt.provider.impl.Auth0RsaJwtGenerator
        - class: io.extact.msa.rms.platform.fw.external.PropagateJwtClientHeadersFactory
  jwt:
    privatekey.path: ${env.rms.sec.jwt.secretkey}
    claim.issuer: RentalReservationSystem
  healthCheck:
    otherChecks:
      - io.extact.msa.rms.platform.core.health.ReadinessOfOutboundServersHealthCheck
    readinessOfOutboundServersHealthCheck.probe.url:
      - ${env.rms.service.url.item}
      - ${env.rms.service.url.reservation}
      - ${env.rms.service.url.user}
  openapi:
    title: レンタル予約システム公開API
  env:
    main.jar: msa-rms-apigateway\.jar$
  debug:
    configdump:
      enable: true
      filter.pattern:
        - security
        - env.rms
        - server
